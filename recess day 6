# Error Handling in Python

# Exception Handling with try, except, else, and finally
# Custom exceptions
# Notes:
# Error handling in python helps to handle unexpected situations and errors.

# 1. Try: contains code that might throw an exception
# NB: If an exception occurs the rest of the code in the try block is skipped or ignored

# 2. Except: catches and handles exceptions
# NB: You can specify different handlers for different exception types

# 3. Else: the code runs if no exception occurs
# If no exceptions are raised in the try block it runs.

# 4. Finally: It runs whether an exception is raised / occurred or not
# NB: Used for cleaning up actions

# Example 1: Handle exceptions with division by zero
try:
    # Get user input
    number = int(input('Enter a number: '))
    # Perform division operation
    result = 10 / number
except ValueError:
    # Handle invalid input
    print("Invalid number! Please enter a valid number")
except ZeroDivisionError:
    # Handle division by zero error
    print("Error! Division by zero is not allowed")
else:
    # Print result if no exception occurs
    print(f"Result is {result}")
finally:
    # Print a message to indicate execution completion
    print("Execution completed successfully")

# Exercise 1: Write a function that converts a string to a float and handle both ValueError
# if the string cannot be converted to a float and the TypeError if the input is not a string.
# Use multiple except blocks to handle these exceptions.
def convert_to_float():
    try:
        # Get input from user
        value = input('Enter a value to convert to float: ')
        # Attempt to convert the value to a float
        result = float(value)
        print(f'The converted float is: {result}')
    except ValueError:
        # Handle the case where the string cannot be converted to a float
        print('Error: The provided string cannot be converted to a float.')
    except TypeError:
        # Handle the case where the input is not a string
        print('Error: The provided input is not a string.')
    finally:
        # Print a message to indicate execution completion
        print('Execution completed.')

# Call the function
convert_to_float()

# Custom exception handling

# Example 2: Exception raised for error in the input, if funds are insufficient.
class InsufficientFundsError(Exception):
    def __init__(self, balance, amount):
        self.balance = balance
        self.amount = amount
        self.message = f"Attempt to withdraw {self.amount} with only {self.balance} in account"
        super().__init__(self.message)

def withdraw(balance, amount):
    if amount > balance:
        raise InsufficientFundsError(balance, amount)
    return balance - amount

# Custom exception handling
try:
    balance = 500000
    amount_to_withdraw = 300000
    new_balance = withdraw(balance, amount_to_withdraw)
except InsufficientFundsError as e:
    print(f"Error: {e.message}")
else:
    print(f"Withdrawal Successful! New balance: {new_balance}")
finally:
    print("Transaction completed")

# Exercise 2: Create a custom exception InvalidAgeError and write a function that raises
# this exception if the given age is negative. Handle this custom exception when calling the function.
class InvalidAgeError(Exception):
    def __init__(self, age):
        self.age = age
        self.message = f"Age {self.age} is invalid. Age cannot be negative."
        super().__init__(self.message)

def check_age(age):
    if age < 0:
        raise InvalidAgeError(age)
    return age

# Get user input at runtime
try:
    while True:
        age = int(input("Enter a person's age: "))
        age = check_age(age)
        print(f"Age is valid: {age}")
        break
except InvalidAgeError as e:
    print(f"Error: {e.message}")
else:
    print("Age validation successful!")
finally:
    print("Age validation completed")
